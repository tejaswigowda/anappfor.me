var caresusernotificationsinit = function()
{
  getElementObject("buttonNotifications").innerHTML = getElementObject("buttonNotifications").innerHTML + '<div class="notBadge" id="notBadge"> </div>';
 	
 getElementObject("notificationsInputBoxOptions").innerHTML = "<a href='javascript:notificationRead()' id='markRead' class='notOptionButton'>Mark as Read</a>"+
"<a href='javascript:notificationUnread()' id='markUnread' class='notOptionButton'>Mark as Unread</a>"+
"<span> | </span>"+
"<a href='javascript:notificationStar()' id='flagFav' class='notOptionButton'>Add Star</a>"+
"<a href='javascript:notificationUnstar()' id='flagUnfav' class='notOptionButton'>Remove Star</a>";
// getElementStyleObject("notificationsInputBoxOptions").display = 'none';
	getElementStyleObject("refreshButtonBBox").display = "none";

  getElementObject("notOptions").innerHTML = "<a href='javascript:notRead()' id='notReadLink' class='notLink'> </a>"+
												"<a href='javascript:notUnread()' id='notUnreadLink' class='notLink'> </a>"+
												"<span> </span>"+
												"<a href='javascript:notFav()' id='notFavLink' class='notLink'> </a>"+
												"<a href='javascript:notUnfav()' id='notUnfavLink' class='notLink'> </a>";
  getElementObject("refreshButtonBBox").innerHTML = "<a href='javascript:notificationRefresh()'> <div class='refreshButton'></div></a>";
  getElementObject("notificationsDelete").innerHTML = "<a href='javascript:notificationsDeleteClicked()'> <div class='glassFinish deleteButton'>Delete notification</div></a>";
  getElementObject("notificationsDeleteYes").innerHTML = "<a href='javascript:notificationsDeleteYesClicked()'> <div class='glassFinish deleteYes'>Yes, delete now.</div></a>";
  getElementObject("notificationsDeleteNo").innerHTML = "<a href='javascript:notificationsDeleteNoClicked()'> <div class='glassFinish deleteNo'>No, not now.</div></a>";
  setTimeout('notificationsAux()', 1000);
}

var readOption = true;
var starOption = true;

function notificationRead()
{
	readOption = true;
	$("#markRead").hide();
	$("#markUnread").show();
	editNotification();
}


function notificationUnread()
{
	readOption = false;
	$("#markRead").show();
	$("#markUnread").hide();
	editNotification();
}


function notificationStar()
{
	starOption = true;
	$("#flagFav").hide();
	$("#flagUnfav").show();
	editNotification();
}


function notificationUnstar()
{
	starOption = false;
	$("#flagFav").show();
	$("#flagUnfav").hide();
	editNotification();
}

function editNotification()
{ 
  //activityIndicator.show();
 // var read = getElementObject("isRead").checked;
 // var star = getElementObject("isStar").checked;
  var url = App.mainURL;
  url = url + "editNotification";
  url = url + "?notID=" + currNotifications;
  url = url + "&read=" + readOption.toString();
  url = url + "&star=" + starOption.toString();
  var callback = editNotifications_CB;
  loadFile(url, callback);
}
function editNotifications_CB(data)
{
	return;
  //activityIndicator.hide();
}

function notificationsAux()
{
}
function notificationRefresh()
{
  getNotificationsInfo();
}

function notificationsDeleteClicked()
{
  getElementStyleObject("notificationsDeleteConf").display = "block";
  getElementStyleObject("notificationsDelete").display = "none";
}

function setNotBadge()
{
	getElementStyleObject("notBadge").opacity = "0";
  var url = App.mainURL;
  url = url + "getNotificationCount";
  url = url + "?userID=" + encodeURIComponent(userID);
  console.log(url);
  var callback = setNotBadge_CB;
  loadFile(url, callback);
}

function setNotBadge_CB(data)
{
	var n = parseInt(data);
	if(n.toString() === "NaN"){
		n = 0;
	}
	getElementObject("notBadge").innerHTML = n.toString();
	if(n > 0){
		getElementStyleObject("notBadge").opacity = "1";
	}
	if(ENV.device.iOS){
		handleIOSBadge(n);
	}
	else if(ENV.device.android){
		handleAndroidBadge(n);
	}
}

function handleIOSBadge(n){
	if(ENV.embedded){ 
		apppush.setBadge(n.toString());
		return;
	}
}

function handleAndroidBadge(n){}

function notificationsDeleteYesClicked()
{
  activityIndicator.show();
  var url = App.mainURL;
  url = url + "editNotification";
  url = url + "?notID=" + currNotifications;
  url = url + "&archived=true";
  console.log(url);
  var callback = deleteNotifications_CB;
  loadFile(url, callback);
}

function deleteNotifications_CB(data)
{
  getNotificationsInfo();
  backButtonClicked();
}

function notificationsDeleteNoClicked()
{
  getElementStyleObject("notificationsDeleteConf").display = "none";
  getElementStyleObject("notificationsDelete").display = "block";
}


function notificationsEC()
{
}

function notificationsActive()
{
  locAllStyle();
  lastScrollPosition = 0;
  getNotificationsInfo();
}

function getNotificationsInfo()
{
  getElementStyleObject("notificationsBoxWrapper").display = "none";
  getElementStyleObject("notificationsListWrapper").display = "block";
  activityIndicator.show();
  var url = App.mainURL;
  url = url + "getNotifications";
  url = url + "?userID=" + userID;
  console.log(url);
	getElementStyleObject("refreshButtonBBox").display = "block";
  var callback = getNotificationsInfo_CB;
  loadFile(url, callback);
  setNotBadge();
   var brandID = "notBrand";
   var  brandTextID = "notBrandText";
   getElementStyleObject(brandID).backgroundImage = "";
   getElementStyleObject(brandTextID).color = '';
getElementObject(brandTextID).innerHTML = '';

}

var data63;
var currNotList = [];
function getNotificationsInfo_CB(data)
{
  activityIndicator.hide();
  data63 = data;
  if(data === ""){
    return;
  }
  var pInfo = JSON.parse(data);
  if(pInfo.length == 0){
    getElementObject("notificationsList").innerHTML = "<p class='titleText'>No messages here. Please check back later.</p>";
    return;
  }
  var pKeys;
  var name = "";
  var city = "";
  var date = "";
  var outS = "";
  var classSt = "listItem";
  var count = 0;
  for(var i = 0; i<pInfo.length; i++){
	classSt = "listItem";
    pKeys = Object.keys(pInfo[i]);
    if(pKeys.contains("message") >=0){
      name = pInfo[i].message;
    }
    if(pKeys.contains("loctext") >=0){
      city = pInfo[i].loctext;
    }
    if(pKeys.contains("date") >=0){
      date = moment(parseInt(pInfo[i].date)).fromNow();
    }
    if(pKeys.contains("star") >=0){
      if(pInfo[i].star === "true"){
        classSt = classSt + " favorite";
      }
	  else{
        classSt = classSt + " nofavorite";
	  }
    }
	else{
        classSt = classSt + " nofavorite";
	}
    if(pKeys.contains("read") >=0){
      if(pInfo[i].read === "true"){
        classSt = classSt + " seen";
      }
	  else{
        classSt = classSt + " notseen";
        count++;
	  }
    }
	else{
		classSt = classSt + " notseen";
        count++;
	}
    outS = outS + "<a class='" + classSt+ "' href='javascript:notificationsSelected(" + '"' + pInfo[i].notID + '")' + "' style=" + '"' + "background-image: url('https://s3.amazonaws.com/caresapp/" + pInfo[i].loc + "icon.png')" +'"' + "> <div class='new msgbadge'></div><div class='star msgbadge'></div><div class='line1'>" + name + "</div><div class='line2'>" + city +  ", " + date + ".</div></a>";
	if(i==0){console.log(outS);}
  }
  getElementObject("notificationsList").innerHTML = outS;
notificationsInfoCB2();
setNotBadge_CB(count.toString());
}

function notificationsInfoCB2()
{

  	$("html").animate({"scrollTop":lastScrollPosition}, 200)
  	lastScrollPosition = 0;
 // scrollRefresh("caresuser-notifications", flag);

}

var isNewNotifications = false;
function addNewNotifications(pID)
{
  isNewNotifications = true;
  getElementObject("notificationsText").innerHTML = "Adding New Notification";
  getElementStyleObject("notificationsBoxWrapper").display = "block";
  getElementStyleObject("notificationsListWrapper").display = "none";

  getElementObject("notificationsNameEn").value = "";
  getElementObject("notificationsNameEs").value = "";

  getElementStyleObject("notificationsDeleteConf").display = "none";
  getElementStyleObject("notificationsDelete").display = "none";
}

function notificationsSelected(pID)
{
  activityIndicator.show();
getElementStyleObject("refreshButtonBBox").display = "none";
  lastScrollPosition = getDocumentScroll();
  $("body").animate({"scrollTop":"0"}, 200);
  showBackButton();
  currNotifications = pID;
  isNewNotifications = false;
  getElementStyleObject("notificationsBoxWrapper").display = "block";
  getElementStyleObject("notificationsListWrapper").display = "none";

  getElementStyleObject("notificationsDeleteConf").display = "none";
  getElementStyleObject("notificationsDelete").display = "block";
 // getElementObject("isRead").checked = true;
  var url = App.mainURL;
  url = url + "getNotification";
  url = url + "?notID=" + pID;
  url = url + "&userID=" + userID;
  console.log(url);
  var callback = notificationsSelected_CB;
  loadFile(url, callback);
}

var data78;
function notificationsSelected_CB(data)
{
  var pInfo = JSON.parse(data);
  var pKeys = Object.keys(pInfo);
  var temp;
  var outS = "";
  data78 = pInfo;

  temp = "star";
  if(pKeys.contains(temp) >=0){
     if(pInfo[temp] === "true"){
     	 starOption = true;
     	 $("#flagFav").hide();
     	 $("#flagUnfav").show();
     }
     else{
     	 starOption = false;
     	 $("#flagFav").show();
     	 $("#flagUnfav").hide();
     }
  }
  else{
	starOption = false;
	$("#flagFav").show();
	$("#flagUnfav").hide();
  }
  temp = "read";
  if(pKeys.contains(temp) >=0){
     if(pInfo[temp] === "true"){
		readOption = true;
		$("#markRead").hide();
		$("#markUnread").show();
     }
     else{
		readOption = false;
		$("#markRead").show();
		$("#markUnread").hide();
     }
  }
  else{
	readOption = true;
	$("#markRead").hide();
	$("#markUnread").show();
  }
  temp = "date";
  var dateSt = "";
  if(pKeys.contains(temp) >=0){
    dateSt = moment(parseInt(pInfo[temp])).format("dddd, MMMM Do YYYY, h:mm a");
  }
  temp = "message";
  if(pKeys.contains(temp) >=0){
    var not = pInfo[temp];
    var notList = not.split("\n");
    var outS = "";
    for (var i = 0; i < notList.length; i++){
      outS = outS + "<p>" + notList[i] + "</p>";
    }
    outS = outS + "<em>" + dateSt + "</em> <div class='horizontalLine'> </div>";
    getElementObject("theNotText").innerHTML = outS;
  }
  else{
    getElementObject("theNotText").innerHTML = "";
  }
  temp = "loc";
  if(pKeys.contains(temp) >=0){
     applyLocationStyleAux(pInfo[temp]);
  }
  else{
    locAllStyle();
  }
  activityIndicator.hide();
}

var currNotifications;

function saveNotificationsClicked()
{
  if(isNewNotifications){
    addNotifications();
  }
  else{
    saveNotificationsInfo();
  }
}

function addNotifications()
{
  activityIndicator.show();
  var url = App.mainURL;
  url = url + "addRow";
  url = url + "?category=CannedNotifications";
  url = url + "&loc=" + Location;
  url = url + "&rowID=" + Location + "HI" + new Date().getTime();
  url = url + "&nameEn=" + encodeURIComponent(getElementObject("notificationsNameEn").value);
  url = url + "&nameEs=" + encodeURIComponent(getElementObject("notificationsNameEs").value);
  var callback = function(){getNotificationsInfo()}
  console.log(url);
  loadFile(url, callback);
}

function saveNotificationsInfo()
{
  activityIndicator.show();
  var url = App.mainURL;
  url = url + "editRow";
  url = url + "?category=CannedNotifications";
  url = url + "&loc=" + Location;
  url = url + "&rowID=" + encodeURIComponent(currNotifications);
  url = url + "&nameEn=" + encodeURIComponent(getElementObject("notificationsNameEn").value);
  url = url + "&nameEs=" + encodeURIComponent(getElementObject("notificationsNameEs").value);
  var callback = function(){getNotificationsInfo()}
  loadFile(url, callback);
}

function notificationsDeActive()
{
  getElementObject("notBrand").innerHTML = "";
  getElementStyleObject("notBrandText").backgroundImage = "none";
getElementStyleObject("refreshButtonBBox").display = "none";
  getElementStyleObject("backButton").display = "none";
}

function backtoNotList()
{
  getElementObject("notBrand").innerHTML = "";
  getElementStyleObject("notBrandText").backgroundImage = "none";
  getElementStyleObject("notificationsBoxWrapper").display = "none";
  getElementStyleObject("notificationsListWrapper").display = "block";
  getElementObject("theNotText").innerHTML = "";
  setNotBadge();
  locAllStyle();
  getNotificationsInfo();
  $(".notLink").hide();
}
